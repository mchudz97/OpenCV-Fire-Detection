#include "FireFeatureDetector.h"




FireFeatureDetector::FireFeatureDetector(Mat toHsi) {

	float r, g, b, y, cb, cr;

	Hsi = toHsi.clone();

	for (int i = 0; i < toHsi.rows; i++) {

		vector<HsiValContainer> hsiCols;

		for (int j = 0; j < toHsi.cols; j++) {

			r = Hsi.at<Vec3b>(i, j)[2];
			g = Hsi.at<Vec3b>(i, j)[1];
			b = Hsi.at<Vec3b>(i, j)[0];

			in = (r + g + b) / 3;

			s = 1 - 3 * (min(r, min(g, b)) / (r + g + b));

			if (s < 0.00001) {

				s = 0;

			}
			else if (s > 0.99999) {

				s = 1;

			}
			if (s != 0)
			{

				h = 0.5 * (r - g - b) / sqrt(((r - g) * (r - g)) + ((r - b) * (g - b)));
				h = acos(h);

				if (b <= g)
				{

					h = h;

				}
				else {

					h = ((360 * 3.14159265) / 180.0) - h;

				}

			}
			else {

				h = 255;

			}

			HsiValContainer cont = HsiValContainer(h, s, i);
			hsiCols.push_back(cont);
			//if (h >= 0 && h < 60 && s >= 0 && s <= 0.2 && i >= 127 && i < 255) {

				Hsi.at<Vec3b>(i, j)[0] = (h * 180) / 3.14159265;
				Hsi.at<Vec3b>(i, j)[1] = s * 100;
				Hsi.at<Vec3b>(i, j)[2] = in;

			//}
			//else {

				//Hsi.at<Vec3b>(i, j) = Vec3b(0,0,0);

			//}
			

		}

		HsiPixVals.push_back(hsiCols);

	}

}

